// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241205144045_init-dataBase")]
    partial class initdataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(6309));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(6618));

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Vượng CP",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1800),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1801)
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "TONY Fruit",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1812),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1813)
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "NYTO Fresh",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1814),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1814)
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Lavie",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1815),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1816)
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "OneOne",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1817),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1817)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(8429));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(9219));

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Thịt heo",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1647),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1650)
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Hoa quả",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1651),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1652)
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Rau củ",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1653),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1654)
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Nước giải khát",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1655),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1655)
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Đồ ăn vặt",
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1656),
                            IsDeleted = true,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1657)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("BuyerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(1866));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 12, 5, 21, 40, 45, 726, DateTimeKind.Local).AddTicks(2198));

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1843),
                            Description = "null",
                            IsDeleted = false,
                            Price = 39m,
                            ProductImage = "xuongheo",
                            ProductName = "Xương heo có thịt",
                            Quantity = 100,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1844)
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1847),
                            Description = "null",
                            IsDeleted = false,
                            Price = 31m,
                            ProductImage = "camsanh",
                            ProductName = "Cam sành",
                            Quantity = 300,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1848)
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 3,
                            CategoryId = 3,
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1850),
                            Description = "null",
                            IsDeleted = false,
                            Price = 8m,
                            ProductImage = "rauden",
                            ProductName = "Rau dền",
                            Quantity = 50,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1850)
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 4,
                            CategoryId = 4,
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1852),
                            Description = "null",
                            IsDeleted = false,
                            Price = 6m,
                            ProductImage = "lavie",
                            ProductName = "Nước khoáng Lavie",
                            Quantity = 200,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1853)
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 5,
                            CategoryId = 5,
                            CreateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1855),
                            Description = "null",
                            IsDeleted = false,
                            Price = 10m,
                            ProductImage = "banhgao",
                            ProductName = "Bánh gạo OneOne",
                            Quantity = 70,
                            UpdateAt = new DateTime(2024, 12, 5, 21, 40, 45, 728, DateTimeKind.Local).AddTicks(1855)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleID");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "buyer"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "supporter"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
